" Include config that gets shared with IdeaVim
source ~/.vimrc.shared

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Parameters for vim and plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set relativenumber

" Wrap lines, but don't do auto-linebreaking
" From: http://vim.wikia.com/wiki/Word_wrap_without_line_breaks
set wrap
set linebreak
set nolist  " list disables linebreak
set textwidth=80
set wrapmargin=0
set formatoptions-=t

set scrolloff=5

" Auto indent broken lines
set breakindent
set showbreak=\ \ " comment so that the whitespace works >.>

" Maybe I should wean myself off this one, but use system clipboard as default
let os = substitute(system('uname'), "\n", "", "")
if os == "Linux"
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

" Set gruvbox color scheme with italics but no bolding
set background=dark
let g:gruvbox_underline=1
let g:gruvbox_italic=1
let g:gruvbox_undercurl=1
let g:gruvbox_bold=0
colorscheme gruvbox

" save undo history per file
set undofile
" set a directory to store the undo history
set undodir=$HOME/.vimundo/

" Have CtrlP search the current working directory not open file's directory
let g:ctrlp_working_path_mode = 'wra'

" Use tslime to run rspec
let g:rspec_command = 'call Send_to_Tmux("rspec_fn {spec}\n")'
"let g:rspec_command = 'Dispatch bundle exec spring rspec {spec}'
let g:mustache_abbreviations = 1

" always use current session and window in tslime
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1

" Map key to rubocop auto-correct
let g:vimrubocop_keymap = 0

" format with goimports instead of gofmt
let g:go_fmt_command = "goimports"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions and executable commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Auto indent when you press i in a blank line
function! IndentWithI()
  if len(getline('.')) == 0
    return "\"_cc"
  else
    return "i"
  endif
endfunction

" enables % to jump between opening and closing tags
runtime macros/matchit.vim

augroup VimrcLocalAugroup
  autocmd!

  " automatically rebalance windows on vim resize
  autocmd VimResized * :wincmd =

  " Remove whitespace before writing a buffer
  autocmd bufwritepre * :%s/\s\+$//e

  " Go to last file if invoked without arguments.
  autocmd VimEnter * nested if
        \ argc() == 0 |
        \   exe "normal! `0" |
        \ endif

  " Reload vimrc when it's saved
  autocmd bufwritepost vimrc.local execute 'normal! mm' | silent so $MYVIMRC | execute 'normal! `m'
  autocmd bufwritepost vimrc.shared execute 'normal! mm' | silent so $MYVIMRC | execute 'normal! `m'
  autocmd bufwritepost vimrc.bundles.local silent execute '!env RCRC=$HOME/dotfiles/rcrc rcup' | silent source $MYVIMRC
augroup END

" This is helpful for refreshing the status line when vimrc is reloaded
if exists(":AirlineRefresh")
  AirlineRefresh
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General keyboard shortcut mappings (that are not shared with IdeaVim)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <expr> i IndentWithI()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Leader key mappings (that are not shared with IdeaVim or from thoughtbot)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"nnoremap <leader><leader> <c-^>| "thoughtbot
nmap <Leader>a :A<CR>| " Shortcut for switching between spec and source
"nmap <Leader>ct :call ReindexCtags()<CR>| "thoughtbot
"nmap <Leader>e :e| "ideavim shared:
nmap <Leader>er :Errors<CR>
nmap <Leader>f :NERDTreeToggle<CR>
nmap <Leader>h :SidewaysLeft<cr>
nmap <Leader>l :SidewaysRight<cr>
nmap <Leader>o :CtrlPMixed<CR><c-d>
nmap <Leader>ru :RuboCop --auto-correct<CR>
nmap <Leader>rw :%s/\<<C-r><C-w>\>/| " Search and replace current word
"nmap<Leader>s :call RunNearestSpec()<CR>| "thoughtbot
"nmap<Leader>t :call RunNearestSpecFile()<CR>| "thoughtbot
"nmap <Leader>q :q| "ideavim shared
nmap <Leader>vl :e ~/dotfiles-local/vimrc.local<CR>
nmap <Leader>vp :e ~/dotfiles-local/vimrc.bundles.local<CR>
nmap <Leader>vs :e ~/dotfiles-local/vimrc.shared<CR>
"nmap <Leader>w :w| "ideavim shared
"nmap <Leader>x :x| "ideavim shared
