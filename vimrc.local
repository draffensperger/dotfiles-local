" Set gruvbox color scheme with italics but no bolding
set background=dark
let g:gruvbox_underline=1
let g:gruvbox_italic=1
let g:gruvbox_undercurl=1
let g:gruvbox_bold=0
colorscheme gruvbox

" Easier escaping
inoremap jj <Esc>
inoremap jk <Esc>
cnoremap jk <Esc>
vnoremap jk <Esc>

" Use tslime to run rspec
let g:rspec_command = 'call Send_to_Tmux("rspec_fn {spec}\n")'
let g:mustache_abbreviations = 1
set scrolloff=5

" Auto indentation
set smartindent

" Auto indent broken lines
set breakindent
set showbreak=\ \ " comment so that the whitespace works >.>

" Maybe I should wean myself off this one, but use system clipboard as default
set clipboard=unnamedplus

" Convenience for entering commands, just use ; for :
map ; :

" Paste text and then smart indent by default
nmap p p=`]
nnoremap <c-p> p

" Ctrl+V pastes in insert mode
imap <c-v> <c-r>"

" Auto indent when you press i in a blank line
function! IndentWithI()
    if len(getline('.')) == 0
        return "\"_cc"
    else
        return "i"
    endif
endfunction
nnoremap <expr> i IndentWithI()

" Shortcut for opening CtrlPMixed
nnoremap <Leader>o :CtrlPMixed<CR><c-d>

" Shortcut for switching between spec and source
nmap <Leader>a :A<CR>

" Shortcuts for common buffer actions
nnoremap <Leader>w :w<CR>
nnoremap <Leader>q :q<CR>
nnoremap <Leader>Q :q!<CR>
nnoremap <Leader>x :x<CR>
nnoremap <Leader>e :e<CR>

" Shortcut for search and replace current word
nnoremap <Leader>rw :%s/\<<C-r><C-w>\>/

" Expand region as you press v
v vmap <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Swap words left and right
nnoremap <silent> gl "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR><c-l>
nnoremap <silent> gh "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>

" NERDTree Toggle
map <Leader>f :NERDTreeToggle<CR>

" Show syntastic messages with signs and use rubocop
let g:syntastic_check_on_open=0
let g:syntstic_enable_signs=1
let g:syntastic_auto_loc_list=1
let g:syntastic_ruby_checkers = ['mri', 'rubocop']
let g:syntastic_mode_map = { "mode": "passive" }


" Shortcut key to display errors
nnoremap <Leader>er :Errors<CR>

" Map key to rubocop auto-correct
let g:vimrubocop_keymap = 0
nmap <Leader>ru :RuboCop --auto-correct<CR>

" Run Syntastic (including rubocop) after 2 seconds of inactivity
set updatetime=2000
let g:start_time=localtime()
au CursorHold * call SaveAndSyntastic()
function! SaveAndSyntastic()
  update
  execute "SyntasticCheck"
endfunction

let g:auto_save_events = [ "CursorMoved", "InsertLeave" ]
let g:auto_save_no_updatetime = 1
let g:auto_save_in_insert_mode = 0 
let g:auto_save_silent = 1

set incsearch   " incremental searching
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter
