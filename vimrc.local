source ~/.vimrc.shared

" Set gruvbox color scheme with italics but no bolding
set background=dark
let g:gruvbox_underline=1
let g:gruvbox_italic=1
let g:gruvbox_undercurl=1
let g:gruvbox_bold=0
colorscheme gruvbox

set relativenumber

" Wrap lines, but don't do auto-linebreaking
" From: http://vim.wikia.com/wiki/Word_wrap_without_line_breaks
set wrap
set linebreak
set nolist  " list disables linebreak
set textwidth=80
set wrapmargin=0
set formatoptions-=t

" Use tslime to run rspec
"let g:rspec_command = 'call Send_to_Tmux("rspec_fn {spec}\n")'
let g:rspec_command = 'Dispatch bin/rspec {spec}'
let g:mustache_abbreviations = 1
set scrolloff=5

" always use current session and window in tslime
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1

" Auto indent broken lines
set breakindent
set showbreak=\ \ " comment so that the whitespace works >.>

" Maybe I should wean myself off this one, but use system clipboard as default
let os = substitute(system('uname'), "\n", "", "")
if os == "Linux"
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

" Ctrl+V pastes in insert mode
imap <c-v> <c-r>"

" Auto indent when you press i in a blank line
function! IndentWithI()
  if len(getline('.')) == 0
    return "\"_cc"
  else
    return "i"
  endif
endfunction
nnoremap <expr> i IndentWithI()

" Shortcut for opening CtrlPMixed
nnoremap <Leader>o :CtrlPMixed<CR><c-d>

" Have CtrlP search the current working directory not open file's directory
let g:ctrlp_working_path_mode = 'wra'

" Shortcut for switching between spec and source
" nmap <Leader>a :A<CR>

" Move items in lists
nnoremap <Leader><c-h> :SidewaysLeft<cr>
nnoremap <Leader><c-l> :SidewaysRight<cr>

" Shortcut for search and replace current word
nnoremap <Leader>rw :%s/\<<C-r><C-w>\>/

" Expand region as you press v
v vmap <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Swap words left and right
nnoremap <silent> gl "_yiw:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o>/\w\+\_W\+<CR><c-l>
nnoremap <silent> gh "_yiw?\w\+\_W\+\%#<CR>:s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR><c-o><c-l>

" NERDTree Toggle
map <Leader>f :NERDTreeToggle<CR>

" Show syntastic messages with signs and use rubocop
" let g:syntastic_check_on_open=0
" let g:syntstic_enable_signs=1
" let g:syntastic_auto_loc_list=1
" let g:syntastic_ruby_checkers = ['mri', 'rubocop']
" let g:syntastic_mode_map = { "mode": "passive" }

" Shortcut key to display errors
nnoremap <Leader>er :Errors<CR>

" Map key to rubocop auto-correct
let g:vimrubocop_keymap = 0
nmap <Leader>ru :RuboCop --auto-correct<CR>

" Run Syntastic (including rubocop) after a few seconds of inactivity
" set updatetime=6000
" au CursorHold * call RunSyntastic()
" function! RunSyntastic()
"   execute "SyntasticCheck"
" endfunction

" Autosave immediately when not in insert mode
" let g:auto_save = 1
" let g:auto_save_events = [ "CursorMoved", "InsertLeave" ]
" let g:auto_save_no_updatetime = 1
" let g:auto_save_in_insert_mode = 0 
" let g:auto_save_silent = 1

" format with goimports instead of gofmt
let g:go_fmt_command = "goimports"

" save undo history per file
set undofile
" set a directory to store the undo history
set undodir=$HOME/.vimundo/

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" enables % to jump between opening and closing tags
runtime macros/matchit.vim

" Go to last file if invoked without arguments.
autocmd VimEnter * nested if
  \ argc() == 0 |
  \   exe "normal! `0" |
  \ endif

" Useful for editing and auto-sourcing/auto-installing vim config
nmap <Leader>vl :e ~/dotfiles-local/vimrc.local<CR>
nmap <Leader>vb :e ~/dotfiles-local/vimrc.bundles.local<CR>
nmap <Leader>vs :e ~/dotfiles-local/vimrc.shared<CR>
autocmd! bufwritepost vimrc.local silent source %
autocmd! bufwritepost vimrc.shared silent source % 
autocmd! bufwritepost vimrc.bundles.local silent execute '!env RCRC=$HOME/dotfiles/rcrc rcup' | silent source $MYVIMRC | redraw!
