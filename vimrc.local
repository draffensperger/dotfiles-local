" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Include config that gets shared with IdeaVim
source ~/.vimrc.shared

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Parameters for vim and plugins
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set relativenumber
set nonumber

" These settings make things better for EasyMotion with zoomed in screens
"set shortmess=at
"set cmdheight=2

" Wrap lines, but don't do auto-linebreaking
" From: http://vim.wikia.com/wiki/Word_wrap_without_line_breaks
set wrap
set linebreak
set nolist  " list disables linebreak
set textwidth=80
set wrapmargin=0
set formatoptions-=t

" Makes rails.vim :A create alterate file
" didn't quite get that working!
" set confirm

set scrolloff=5

" Auto indent broken lines
set breakindent
set showbreak=\ \ " comment so that the whitespace works >.>

" Maybe I should wean myself off this one, but use system clipboard as default
let os = substitute(system('uname'), "\n", "", "")
if os == "Linux"
  set clipboard=unnamedplus
else
  set clipboard=unnamed
endif

" Set gruvbox color scheme with italics but no bolding
set background=dark
let g:gruvbox_underline=1
let g:gruvbox_italic=1
let g:gruvbox_undercurl=1
let g:gruvbox_bold=0
colorscheme gruvbox
"colorscheme nofrils-dark
"let g:nofrils_strbackgrounds=1

" save undo history per file
set undofile
" set a directory to store the undo history
set undodir=$HOME/.vimundo/

" Have CtrlP search the current working directory not open file's directory
let g:ctrlp_working_path_mode = 'wra'

let g:mustache_abbreviations = 1

" always use current session and window in tslime
let g:tslime_always_current_session = 1
let g:tslime_always_current_window = 1

let g:tmux_navigator_save_on_switch = 1

" Map key to rubocop auto-correct
let g:vimrubocop_keymap = 0

" format with goimports instead of gofmt
let g:go_fmt_command = "goimports"

let g:airline_powerline_fonts = 1

let g:EasyMotion_do_mapping = 0

let g:golden_ratio_wrap_ignored = 1

let test#strategy = "tslime"

" Use a nicer split character
set fillchars+=vert:â”‚
hi VertSplit ctermbg=NONE guibg=NONE

let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.xml,*.erb"

autocmd Filetype javascript setlocal ts=4 sts=4 sw=4

nnoremap <M-Left> :tabprevious<CR>
nnoremap <M-Right> :tabnext<CR>

let g:UltiSnipsExpandTrigger="<c-n>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions and executable commands
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Auto indent when you press i in a blank line
function! IndentWithI()
  if len(getline('.')) == 0
    return "\"_cc"
  else
    return "i"
  endif
endfunction

" enables % to jump between opening and closing tags
runtime macros/matchit.vim

set laststatus=0

" http://stackoverflow.com/questions/6496778/vim-run-autocmd-on-all-filetypes-except
fun! StripTrailingWhitespace()
    " Only strip trailing text on these filetypes
    if &ft =~ 'ruby\|javascript\|perl'
      %s/\s\+$//e
    endif
endfun

autocmd BufWritePre * call StripTrailingWhitespace()

augroup VimrcLocalAugroup
  autocmd!

  " automatically save buffers when you switch between them
  autocmd BufLeave,FocusLost * wall

  " automatically rebalance windows on vim resize
  autocmd VimResized * :wincmd =

  " Remove whitespace before writing a buffer
  autocmd bufwritepre * call StripTrailingWhitespace()

  " Go to last file if invoked without arguments.
  autocmd VimEnter * nested if
        \ argc() == 0 |
        \   exe "normal! `0" |
        \ endif

  " close vim if only nerdtree left
   " autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

  " Reload vimrc when it's saved
  autocmd bufwritepost vimrc.local execute 'normal! mm' | silent so $MYVIMRC | execute 'normal! `m'
  autocmd bufwritepost vimrc.shared execute 'normal! mm' | silent so $MYVIMRC | execute 'normal! `m'
  autocmd bufwritepost vimrc.bundles.local silent execute '!env RCRC=$HOME/dotfiles/rcrc rcup' | silent source $MYVIMRC
augroup END

" This is helpful for refreshing the status line when vimrc is reloaded
if exists(":AirlineRefresh")
  AirlineRefresh
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General keyboard shortcut mappings (that are not shared with IdeaVim)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" I include these because vim-tmux-navigator doesn't seem to reload when I
" source my vimrc again.
nnoremap <silent> <c-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-j> :TmuxNavigateDown<cr>
nnoremap <silent> <c-k> :TmuxNavigateUp<cr>
nnoremap <silent> <c-l> :TmuxNavigateRight<cr>
nnoremap <silent> <c-\> :TmuxNavigatePrevious<cr>

nmap <expr> i IndentWithI()

nmap s <Plug>(easymotion-overwin-f)

nmap <Leader><c-L> :SidewaysRight<cr>
nmap <Leader><c-H> :SidewaysLeft<cr>

:nmap <C-N><C-N> :set invnumber<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Leader key mappings (that are not shared with IdeaVim or from thoughtbot)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nmap <Leader>/ :Gsearch
"vmap <Leader>/ "zy:Gsearch <C-r>z<CR><CR><CR>:%s/\<<C-r>a\>/
"nnoremap <leader><leader> <c-^>| "thoughtbot
nmap <Leader>.f :silent cd ~/dotfiles-local<CR>
nmap <Leader>.nt :silent cd ~/dotfiles-local<CR> :NERDTreeToggle<CR> <C-j> CD :NERDTreeToggle<CR>
nmap <leader>bp orequire 'pry'; binding.pry<esc>
nmap <leader>bn :g/binding\.pry/d<cr>:w<cr>
"nmap <Leader>ct :call ReindexCtags()<CR>| "thoughtbot
"nmap <Leader>e :e| "ideavim shared:
vmap <Leader>d <Plug>SendSelectionToTmux<cr>
nmap <Leader>d mmV<Plug>SendSelectionToTmux<cr>`m
nmap <Leader>er :Errors<CR>
nmap <Leader>ec :e %:p:h<cr>| " Open folder of current buffer
nmap <Leader>f :NERDTreeToggle<CR>
nmap <Leader>gc :Gcommit -v<CR>
nmap <Leader>gs :Gstatus<CR>
nmap <Leader>gac :Git aa<CR><Space>:Gcommit -v<CR>
nmap <Leader>gp :Git p<cr><space>
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
"nmap<Leader>l :call :call RunLastSpec()<CR>| "thoughtbot
nmap <Leader>nr :e ~/wmd/scratch/scratch.rb<CR>
nmap <Leader>ne :e ~/wmd/scratch/boston_rb_meetup.rb<CR>
nmap <Leader>nc :e ~/wmd/scratch/cmds.txt<CR>
nmap <Leader>nt :e ~/wmd/scratch/todo.txt<CR>
nmap <Leader>nw :e ~/wmd/scratch/workflow.txt<CR>
nmap <Leader>o :CtrlP<CR><c-d>
nmap <Leader>p :CtrlPMRU<CR><c-d>
nmap <Leader>ru :RuboCop --auto-correct<CR>
nmap <Leader>rg "ayiw:Gsearch <C-r>a<CR><CR><CR>:%s/\<<C-r>a\>/
nmap <Leader>rw :%s/\<<C-r><C-w>\>/| " Search and replace current word
nmap <Leader>rn :let @z = expand("%:t")<cr>:Rename <c-r>z
nmap <Leader>rm :Remove
"nmap<Leader>s :call RunNearestSpec()<CR>| "thoughtbot
"nmap<Leader>t :call RunNearestSpecFile()<CR>| "thoughtbot
"nmap <Leader>q :q| "ideavim shared
nmap <Leader>vl :e ~/dotfiles-local/vimrc.local<CR>
nmap <Leader>vp :e ~/dotfiles-local/vimrc.bundles.local<CR>
"nmap <Leader>vs :e ~/dotfiles-local/vimrc.shared<CR>
nmap <Leader>vs :Obsess<CR>
"nmap <Leader>w :w| "ideavim shared
"nmap <Leader>x :x| "ideavim shared
nmap <Leader>; <Plug>(easymotion-bd-w)
